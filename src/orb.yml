version: 2.1

orbs:
  digitalocean: digitalocean/cli@0.1.1
  rancher2_cli: brandnewbox/rancher2_cli@1.1.0
  kubernetes: circleci/kubernetes@0.11.0

description: |
  Build, test, and deploy a BNB rails application
examples:
  simple_install_and_configure:
    description: Build, test, and deploy my rails application
    usage:
      version: 2.1
      orbs:
        drydock: brandnewbox/drydock@1.6.0
      parameters:
        builder-image-name:
          type: string
          default: "brandnewbox/my-app-builder"
        builder-image-tag:
          type: string
          default: $CIRCLE_SHA1
        final-image-name:
          type: string
          default: "brandnewbox/my-app"
        final-image-tag:
          type: string
          default: $CIRCLE_SHA1
        rancher-context:
          type: string
          default: "c-abcde:p-vwxyz"
        rancher-namespace:
          type: string
          default: "rails"
      workflows:
        devops_flow:
          jobs:
            - drydock/build-and-push-builder:
                dockerfile-path: ./devops
                builder-image-name: << pipeline.parameters.builder-image-name >>
                builder-image-tag: << pipeline.parameters.builder-image-tag >>
                context: DO_BNB_REGISTRY
            - test:
                context: DO_BNB_REGISTRY
                requires:
                  - drydock/build-and-push-builder
            - drydock/build-and-push-final:
                builder-image: << pipeline.parameters.builder-image-name >>:<< pipeline.parameters.builder-image-tag >>
                final-image-name: << pipeline.parameters.final-image-name >>
                final-image-tag: << pipeline.parameters.final-image-tag >>
                context: DO_BNB_REGISTRY
                filters:
                  branches:
                    only: /^(main|staging)$/
                requires:
                  - test
            - hold:
                type: approval
                filters:
                  branches:
                    only: /^(main|staging)$/
                requires:
                  - drydock/build-and-push-final
            - drydock/create-deployment:
                rancher-deployment: rails-puma-deployment
                rancher-container: rails-puma-container
                rancher-namespace: << pipeline.parameters.rancher-namespace >>
                rancher-context: << pipeline.parameters.rancher-context >>
                final-image: << pipeline.parameters.final-image-name >>:<< pipeline.parameters.final-image-tag >>
                context: DO_BNB_REGISTRY
                filters:
                  branches:
                    only: /^(main|staging)$/
                requires:
                  - hold
            - drydock/create-deployment:
                rancher-deployment: rails-sidekiq-deployment
                rancher-container: rails-sidekiq-container
                rancher-namespace: << pipeline.parameters.rancher-namespace >>
                rancher-context: << pipeline.parameters.rancher-context >>
                final-image: << pipeline.parameters.final-image-name >>:<< pipeline.parameters.final-image-tag >>
                context: DO_BNB_REGISTRY
                filters:
                  branches:
                    only: /^(main|staging)$/
                requires:
                  - hold
      jobs:
        test:
          docker:
            - image: registry.digitalocean.com/<< pipeline.parameters.builder-image-name >>:<< pipeline.parameters.builder-image-tag >>
              auth:
                username: $PRIVATE_REGISTRY_USERNAME
                password: $PRIVATE_REGISTRY_PASSWORD
              environment:
                RAILS_ENV: test
                DATABASE_URL: mysql2://root:password@127.0.0.1:3306/my_database
            - image: circleci/mysql:5.7
              environment:
                MYSQL_HOST: 127.0.0.1
                MYSQL_ROOT_PASSWORD: password
                MYSQL_DATABASE: my_database
          working_directory: ~/repo
          steps:
            - drydock/default-test-steps

commands:
  manage-gems:
    description: |
      Manage Gem Dependencies
    parameters:
      version:
        default: "2"
        description: Cache Key Version Number
        type: string
    steps:
      - restore_cache:
          name: Restore Gem Cache
          keys:
            - v<< parameters.version >>-gem-{{ checksum "Gemfile.lock" }}
      - run:
          name: Install Gem Dependencies
          command: |
            gem install bundler
            bundle install --jobs=4 --retry=3 --path vendor/bundle
      - save_cache:
          name: Save Gem Cache
          paths:
            - ./vendor/bundle
          key: v<< parameters.version >>-gem-{{ checksum "Gemfile.lock" }}
  manage-yarn:
    description: |
      Manage Yarn Dependencies
    parameters:
      version:
        default: "2"
        description: Cache Key Version Number
        type: string
    steps:
      - restore_cache:
          name: Restore Yarn Cache
          keys:
            - v<< parameters.version >>-yarn-{{ checksum "yarn.lock" }}
      - run:
          name: Install Yarn Dependencies
          command: yarn install --frozen-lockfile
      - save_cache:
          name: Save Yarn Cache
          paths:
            - ~/.cache/yarn
          key: v<< parameters.version >>-yarn-{{ checksum "yarn.lock" }}
  default-test-steps:
    description: |
      Default Process for Running Tests
    steps:
      - checkout
      - manage-gems
      - manage-yarn
      - run:
          name: Configure Bundler
          command: bundle config --local path vendor/bundle
      - run: 
          name: Create Database
          command: bundle exec rake db:create
      - run: 
          name: Migrate Database
          command: bundle exec rake db:migrate
      - run:
          name: Run Tests
          command: |
            mkdir /tmp/test-results
            TEST_FILES="$(circleci tests glob "spec/**/*_spec.rb" | \
              circleci tests split --split-by=timings)"

            bundle exec rspec \
              --format progress \
              --format RspecJunitFormatter \
              --out /tmp/test-results/rspec.xml \
              --format progress \
              $TEST_FILES
      - store_test_results:
          path: /tmp/test-results
      - store_artifacts:
          path: /tmp/test-results
          destination: test-
  login-to-private-registry:
    description: |
      Log into a registry using context provided env vars
    parameters:
      registry:
        description: Private registry URL
        type: string
        default: registry.digitalocean.com
    steps:
      - run:
          name: Log into private registry
          command: |
            docker login -u $PRIVATE_REGISTRY_USERNAME -p $PRIVATE_REGISTRY_PASSWORD << parameters.registry >>

jobs:
  build-and-push-builder:
    description: |
      Use the application's custom dockerfile to build the builder image and then
      push to a private registry in digital ocean for use in future builds.
    docker:
      - image: brandnewbox/shipit-ruby
    parameters:
      dockerfile-path:
        description: Path to the directory containing a custom Dockerfile that S2I should use to build this project instead of just pulling the base image
        type: string
        default: ./devops
      builder-image:
        description: Name and tag of the builder image
        type: string
      registry:
        description: Registry of the builder image
        type: string
        default: registry.digitalocean.com
    steps:
      - setup_remote_docker:
          docker_layer_caching: true
      - checkout
      - run:
          name: Build the builder image
          command: |
            docker build -t \
            << parameters.builder-image >> \
            << parameters.dockerfile-path >>
      - run:
          name: Tag image with commit SHA tag
          command: |
            docker tag << parameters.builder-image >> \
            << parameters.registry >>/<< parameters.builder-image >>
      - login-to-private-registry
      - run:
          name: Push image with commit SHA tag
          command: |
            docker push \
            << parameters.registry >>/<< parameters.builder-image >>

  build-and-push-final:
    docker:
      - image: brandnewbox/shipit-ruby
    parameters:
      registry:
        description: Registry to use for final and builder images.
        type: string
        default: registry.digitalocean.com
      builder-image:
        description: Builder image name and tag
        type: string
      final-image-name:
        description: Final image name
        type: string
      final-image-tag:
        description: Final image tag
        type: string
      s2i-builder-environment-variables:
        description: Customizable environment variables to pass to S2I during the final image build
        type: string
        default: -e RAILS_ENV=production -e DEVISE_SECRET_KEY=shipit_chokes_without_this -e DATABASE_URL=postgres://user:password@host:5432/database
    steps:
      - setup_remote_docker:
          docker_layer_caching: true
          version: 19.03.13
      - checkout
      - login-to-private-registry
      - run:
          name: Pull the builder image
          command: |
            docker pull << parameters.registry >>/<< parameters.builder-image >>
      - run:
          name: Pull latest final image for S2I artifacts and retag to latest local image
          command: |
            (docker pull << parameters.registry >>/<< parameters.final-image-name >>:latest && docker tag << parameters.registry >>/<< parameters.final-image-name >>:latest << parameters.final-image-name >>:latest) || echo "No image uploaded"
      - run:
          name: Build the final image on top of the builder image
          command: |
            s2i build --incremental . \
            << parameters.registry >>/<< parameters.builder-image >> \
            << parameters.final-image-name >>:latest  \
            --pull-policy never \
            << parameters.s2i-builder-environment-variables >>
      - run:
          name: Tag image with commit SHA tag
          command: |
            docker tag << parameters.final-image-name >>:latest \
            << parameters.registry >>/<< parameters.final-image-name >>:<< parameters.final-image-tag >>
      - run:
          name: Tag image with latest tag
          command: |
            docker tag << parameters.final-image-name >>:latest \
            << parameters.registry >>/<< parameters.final-image-name >>:latest
      - run:
          name: Push image with commit SHA tag
          command: |
            docker push \
            << parameters.registry >>/<< parameters.final-image-name >>:<< parameters.final-image-tag >>
      - run:
          name: Push image with latest tag
          command: |
            docker push \
            << parameters.registry >>/<< parameters.final-image-name >>:latest

  create-deployment:
    docker:
      - image: circleci/python:3.8.0-buster
    parameters:
      rancher-context:
        description: Rancher context
        type: string
      rancher-workload-type:
        default: deployment
        description: Type of workload
        enum:
          - deployment
          - daemonset
        type: enum
      rancher-namespace:
        default: default
        description: Rancher namespace
        type: string
      rancher-deployment:
        description: Rancher deployment
        type: string
      rancher-container:
        description: Rancher container
        type: string
      final-image:
        description: Name and tag of final image
        type: string
      registry:
        default: registry.digitalocean.com
        description: Registry to use for image.
        type: string
      credentials-key-env-var:
        default: RAILS_CREDENTIALS_KEY
        description: Envrionment Variable to use for the Rails Credentials Key.
        type: string
    steps:
      - rancher2_cli/install
      - rancher2_cli/initialize:
          rancher-token: RANCHER_TOKEN
          rancher-server-url: RANCHER_SERVER_URL
          rancher-context: << parameters.rancher-context >>
      # Gotta have kubectl for any `rancher kubectl` commands
      - kubernetes/install-kubectl
      # Give rancher access to DO registry
      - digitalocean/install
      - digitalocean/initialize:
          digitalocean-access-token: DIGITAL_OCEAN_ACCESS_TOKEN
      # This command outputs a YAML-formatted Kubernetes secret manifest that can 
      # be used to grant a Kubernetes cluster pull access to your private container registry.
      # By default, name of the secret is the registry name prefixed with “registry-”
      # https://www.digitalocean.com/docs/apis-clis/doctl/reference/registry/kubernetes-manifest/
      - run: doctl registry kubernetes-manifest --namespace << parameters.rancher-namespace >> | rancher kubectl -n << parameters.rancher-namespace >> apply -f -
      - run: "rancher kubectl -n << parameters.rancher-namespace >> patch serviceaccount default -p '{\"imagePullSecrets\": [{\"name\": \"registry-brandnewbox\"}]}'"
      # Now update the secret
      - run: rancher kubectl -n << parameters.rancher-namespace >> get secret rails-credentials -o json | jq --arg key "$(echo $<< parameters.credentials-key-env-var >> | base64)" '.data["rails-credentials-key"]=$key' | rancher kubectl -n << parameters.rancher-namespace >> apply -f -
      # Now update the image in your deployment
      - run: rancher kubectl -n << parameters.rancher-namespace >> set image << parameters.rancher-workload-type >>/<< parameters.rancher-deployment >> << parameters.rancher-container >>=<< parameters.registry >>/<< parameters.final-image >>
      - run: rancher kubectl -n << parameters.rancher-namespace >> rollout status << parameters.rancher-workload-type >>/<< parameters.rancher-deployment >>


version: 2.1

orbs:
  digitalocean: digitalocean/cli@0.1.1
  rancher2_cli: brandnewbox/rancher2_cli@1.1.0
  kubernetes: circleci/kubernetes@0.11.0

description: |
  Build, test, and deploy a BNB rails application
examples:
  simple_install_and_configure:
    description: Build, test, and deploy my rails application
    usage:
      version: 2.1
      orbs:
        drydock: brandnewbox/drydock@2.0.0
      parameters:
        registry:
          type: string
          default: registry.digitalocean.com
        builder-image:
          type: string
          default: brandnewbox/kpis-builder
        final-image:
          type: string
          default: brandnewbox/kpis
        rancher-context:
          type: string
          default: 'c-tmnrk:p-l87zj'
        rancher-namespace:
          type: string
          default: kpis
      workflows:
        devops_flow:
          jobs:
            - drydock/run-danger:
                context: GITHUB
            - drydock/build-and-push:
                name: build-and-push-builder
                built-image: << pipeline.parameters.registry >>/<< pipeline.parameters.builder-image >>:${CIRCLE_SHA1}
                build-target: builder
                cache-assets: true
                build-args: >-
                  --build-arg RUBY_VERSION=${RUBY_VERSION}
                  --build-arg PG_MAJOR=${PG_MAJOR}
                  --build-arg NODE_MAJOR=${NODE_MAJOR}
                  --build-arg YARN_VERSION=${YARN_VERSION}
                  --build-arg RAILS_MASTER_KEY=${RAILS_MASTER_KEY}
                context: DO_BNB_REGISTRY
            - test:
                image: << pipeline.parameters.registry >>/<< pipeline.parameters.builder-image >>:${CIRCLE_SHA1}
                context: DO_BNB_REGISTRY
                requires:
                  - build-and-push-builder
            - build-and-push:
                name: build-and-push-production
                built-image: << pipeline.parameters.registry >>/<< pipeline.parameters.final-image >>:${CIRCLE_SHA1}
                build-target: production
                cache-assets: true
                build-args: >-
                  --build-arg RUBY_VERSION=${RUBY_VERSION}
                  --build-arg PG_MAJOR=${PG_MAJOR}
                  --build-arg NODE_MAJOR=${NODE_MAJOR}
                  --build-arg YARN_VERSION=${YARN_VERSION}
                  --build-arg RAILS_MASTER_KEY=${RAILS_MASTER_KEY}
                context: DO_BNB_REGISTRY
                filters:
                  branches:
                    only: /^(main)$/
                requires:
                  - build-and-push-builder
            - drydock/create-deployment:
                name: puma-deployment
                rancher-deployment: rails-puma-deployment
                rancher-container: rails-puma-container
                rancher-namespace: << pipeline.parameters.rancher-namespace >>
                rancher-context: << pipeline.parameters.rancher-context >>
                image: << pipeline.parameters.registry >>/<< pipeline.parameters.final-image >>:${CIRCLE_SHA1}
                credentials-key-env-var: RAILS_MASTER_KEY
                context: DO_BNB_REGISTRY
                filters:
                  branches:
                    only: /^(main)$/
                requires:
                  - build-and-push-production
                  - test
            - drydock/create-deployment:
                name: sidekiq-deployment
                rancher-deployment: rails-sidekiq-deployment
                rancher-container: rails-sidekiq-container
                rancher-namespace: << pipeline.parameters.rancher-namespace >>
                rancher-context: << pipeline.parameters.rancher-context >>
                image: << pipeline.parameters.registry >>/<< pipeline.parameters.final-image >>:${CIRCLE_SHA1}
                credentials-key-env-var: RAILS_MASTER_KEY
                context: DO_BNB_REGISTRY
                filters:
                  branches:
                    only: /^(main)$/
                requires:
                  - build-and-push-production
                  - test
      jobs:
        test:
          docker:
            - image: << parameters.image >>
              auth:
                username: $PRIVATE_REGISTRY_USERNAME
                password: $PRIVATE_REGISTRY_PASSWORD
              environment:
                RAILS_ENV: test
                DATABASE_URL: postgres://circleci:password@localhost:5432/my_database
            - image: cimg/postgres:14.4
              environment:
                POSTGRES_USER: circleci
                POSTGRES_PASSWORD: password
                POSTGRES_DB: my_database
          parameters:
            image:
              description: The image to test
              type: string
          working_directory: /home/my_user/app
          steps:
            - drydock/default-test-steps

commands:
  default-test-steps:
    description: |
      Default Process for Running Tests
    steps:
      - run: 
          name: Install Test Env Gems
          command: RAILS_MASTER_KEY=$<< parameters.credentials-key-env-var >> bundle install --with=test
          # We have to specify --with=test because the builder image is configured without test and dev
      - run: 
          name: Create Database
          command: RAILS_MASTER_KEY=$<< parameters.credentials-key-env-var >> bundle exec rake db:create
      - run: 
          name: Migrate Database
          command: RAILS_MASTER_KEY=$<< parameters.credentials-key-env-var >> bundle exec rake db:migrate
      - run:
          name: Run Tests
          command: |
            mkdir /tmp/test-results
            TEST_FILES="$(circleci tests glob "spec/**/*_spec.rb" | \
              circleci tests split --split-by=timings)"
            RAILS_MASTER_KEY=$<< parameters.credentials-key-env-var >> bundle exec rspec \
              --format progress \
              --format RspecJunitFormatter \
              --out /tmp/test-results/rspec.xml \
              --format progress \
              $TEST_FILES
      - store_test_results:
          path: /tmp/test-results
      - store_artifacts:
          path: /tmp/test-results
          destination: test-

jobs:
  build-and-push:
    description: |
      Use the application's custom dockerfile to build an image to a given target and then
      push to a private registry.
    docker:
      - image: docker:17.09.0-ce
    parameters:
      dockerfile-path:
        description: Path to the directory containing a custom Dockerfile that should be used to build this project instead of just pulling the base image
        type: string
        default: ./.dockerdev/Dockerfile
      built-image:
        description: Registry/Name:Tag of the built image
        type: string
      build-target:
        description: Docker Build Target
        type: string
      build-args:
        description: Additional Args to pass to docker build
        type: string
        default: "" 
      docker-version:
        description: The version of the docker engine
        type: string
        default: "" # Setting to blank so that we get the default CircleCI docker version (https://circleci.com/docs/2.0/building-docker-images/#docker-version)
      cache-assets:
        description: Whether or not to use circleCI cache on public/assets
        type: boolean
        default: false
      cache-packs:
        description: Whether or not to use circleCI cache on public/packs
        type: boolean
        default: false
      registry:
        description: Private registry URL
        type: string
        default: registry.digitalocean.com
    steps:
      - setup_remote_docker:
          docker_layer_caching: true
          version: << parameters.docker-version >>
      - checkout
      - when:
          condition: << parameters.cache-assets >>
          steps:
            - restore_cache:
                name: Restore Compiled Assets
                keys:
                  - v1-asset-cache-{{ arch }}-{{ .Branch }}-{{ .Revision }}
      - when:
          condition: << parameters.cache-packs >>
          steps:
            - restore_cache:
                name: Restore Compiled Packs
                keys:
                  - v1-pack-cache-{{ arch }}-{{ .Branch }}-{{ .Revision }}
      - run:
          name: Build the builder image
          command: |
            docker build --target << parameters.build-target >> \
            << parameters.build-args >> \
            --tag << parameters.built-image >> \
            --file << parameters.dockerfile-path >> \
            .
      - when:
          condition: << parameters.cache-assets >>
          steps:
            - run:
                name: Copy Compiled Assets From Built Image
                command: |
                  containerId=$(docker create << parameters.built-image >>); \
                  docker cp $containerId:/home/my_user/app/public/assets public/assets;
                  docker rm -v $containerId
            - save_cache:
                name: Save Compiled Assets
                paths:
                  - public/assets
                key: v1-asset-cache-{{ arch }}-{{ .Branch }}-{{ .Revision }}
      - when:
          condition: << parameters.cache-packs >>
          steps:
            - run:
                name: Copy Compiled Packs From Built Image
                command: |
                  containerId=$(docker create << parameters.built-image >>); \
                  docker cp $containerId:/home/my_user/app/public/packs public/packs;
                  docker rm -v $containerId
            - save_cache:
                name: Save Compiled Packs
                paths:
                  - public/packs
                key: v1-pack-cache-{{ arch }}-{{ .Branch }}-{{ .Revision }}
      - run:
          name: Log into private registry
          command: |
            docker login -u $PRIVATE_REGISTRY_USERNAME -p $PRIVATE_REGISTRY_PASSWORD << parameters.registry >>
      - run:
          name: Push the built image
          command: |
            docker push << parameters.built-image >>

  create-deployment:
    docker:
      - image: circleci/python:3.8.0-buster
    parameters:
      rancher-context:
        description: Rancher context
        type: string
      rancher-workload-type:
        default: deployment
        description: Type of workload
        enum:
          - deployment
          - daemonset
        type: enum
      rancher-namespace:
        default: default
        description: Rancher namespace
        type: string
      rancher-deployment:
        description: Rancher deployment
        type: string
      rancher-container:
        description: Rancher container
        type: string
      image:
        description: Registry/Name:tag of image to deploy
        type: string
      should-update-credentials:
        description: Control whether this deployment should try to update the credentials key
        type: boolean
        default: true
      credentials-key-env-var:
        default: RAILS_CREDENTIALS_KEY
        description: Envrionment Variable to use for the Rails Credentials Key.
        type: string
    steps:
      - rancher2_cli/install
      - rancher2_cli/initialize:
          rancher-token: RANCHER_TOKEN
          rancher-server-url: RANCHER_SERVER_URL
          rancher-context: << parameters.rancher-context >>
      # Gotta have kubectl for any `rancher kubectl` commands
      - kubernetes/install-kubectl
      # Give rancher access to DO registry
      - digitalocean/install
      - digitalocean/initialize:
          digitalocean-access-token: DIGITAL_OCEAN_ACCESS_TOKEN
      # This command outputs a YAML-formatted Kubernetes secret manifest that can 
      # be used to grant a Kubernetes cluster pull access to your private container registry.
      # By default, name of the secret is the registry name prefixed with “registry-”
      # https://www.digitalocean.com/docs/apis-clis/doctl/reference/registry/kubernetes-manifest/
      - run: doctl registry kubernetes-manifest --namespace << parameters.rancher-namespace >> | rancher kubectl -n << parameters.rancher-namespace >> apply -f -
      - run: "rancher kubectl -n << parameters.rancher-namespace >> patch serviceaccount default -p '{\"imagePullSecrets\": [{\"name\": \"registry-brandnewbox\"}]}'"
      # Now update the secret
      - when:
          condition: << parameters.should-update-credentials >>
          steps:
            - run: rancher kubectl -n << parameters.rancher-namespace >> get secret rails-credentials -o json | jq --arg key "$(echo -n $<< parameters.credentials-key-env-var >> | base64)" '.data["rails-credentials-key"]=$key' | rancher kubectl -n << parameters.rancher-namespace >> apply -f -
      # Now update the image in your deployment
      - run: rancher kubectl -n << parameters.rancher-namespace >> set image << parameters.rancher-workload-type >>/<< parameters.rancher-deployment >> << parameters.rancher-container >>=<< parameters.image >>
      - run: rancher kubectl -n << parameters.rancher-namespace >> rollout status << parameters.rancher-workload-type >>/<< parameters.rancher-deployment >>
  
  run-danger:
    docker:
      - image: cimg/ruby:2.7
    steps:
      - checkout
      - run:
          name: Remove Gemfile and lock file # The existing Gemfile/lock file will mess up running danger because of all the dependencies that we aren't installing
          command: rm Gemfile Gemfile.lock
      - run:
          name: Install danger
          command: gem install danger
      - run:
          name: Run danger
          command: danger
